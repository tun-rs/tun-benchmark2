<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>__wake_up_common_lock (212,121,210 samples, 1.89%)</title><rect x="319.1" y="53" width="22.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="322.07" y="63.5" >_..</text>
</g>
<g >
<title>__alloc_skb (10,101,010 samples, 0.09%)</title><rect x="315.9" y="181" width="1.0" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="318.89" y="191.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (10,101,010 samples, 0.09%)</title><rect x="286.1" y="309" width="1.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="289.15" y="319.5" ></text>
</g>
<g >
<title>tun_get_user (4,616,161,570 samples, 41.13%)</title><rect x="281.9" y="357" width="485.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="284.90" y="367.5" >tun_get_user</text>
</g>
<g >
<title>tun_sock_write_space (10,101,010 samples, 0.09%)</title><rect x="639.8" y="261" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="642.83" y="271.5" ></text>
</g>
<g >
<title>__kmalloc_track_caller (10,101,010 samples, 0.09%)</title><rect x="309.5" y="117" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="312.51" y="127.5" ></text>
</g>
<g >
<title>fput_many (20,202,020 samples, 0.18%)</title><rect x="277.7" y="405" width="2.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="280.65" y="415.5" ></text>
</g>
<g >
<title>skb_partial_csum_set (10,101,010 samples, 0.09%)</title><rect x="716.3" y="341" width="1.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="719.30" y="351.5" ></text>
</g>
<g >
<title>__kmalloc_track_caller (10,101,010 samples, 0.09%)</title><rect x="759.8" y="277" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="762.85" y="287.5" ></text>
</g>
<g >
<title>finish_task_switch (10,101,010 samples, 0.09%)</title><rect x="117.3" y="309" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="120.27" y="319.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (40,404,040 samples, 0.36%)</title><rect x="75.9" y="469" width="4.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="78.85" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,010,101,000 samples, 9.00%)</title><rect x="84.3" y="437" width="106.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="87.35" y="447.5" >do_syscall_64</text>
</g>
<g >
<title>__tcp_transmit_skb (121,212,120 samples, 1.08%)</title><rect x="296.8" y="165" width="12.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="299.77" y="175.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (222,222,220 samples, 1.98%)</title><rect x="318.0" y="181" width="23.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="321.01" y="191.5" >_..</text>
</g>
<g >
<title>__kmalloc_reserve.isra.0 (10,101,010 samples, 0.09%)</title><rect x="759.8" y="293" width="1.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="762.85" y="303.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (10,101,010 samples, 0.09%)</title><rect x="105.6" y="309" width="1.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="108.59" y="319.5" ></text>
</g>
<g >
<title>nf_nat_ipv4_in (10,101,010 samples, 0.09%)</title><rect x="651.5" y="277" width="1.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="654.51" y="287.5" ></text>
</g>
<g >
<title>tun_net_xmit (20,202,020 samples, 0.18%)</title><rect x="306.3" y="53" width="2.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="309.33" y="63.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (3,292,929,260 samples, 29.34%)</title><rect x="287.2" y="261" width="346.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="290.21" y="271.5" >ip_protocol_deliver_rcu</text>
</g>
<g >
<title>tun_chr_read_iter (888,888,880 samples, 7.92%)</title><rect x="95.0" y="373" width="93.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="97.97" y="383.5" >tun_chr_rea..</text>
</g>
<g >
<title>__inet_lookup_established (40,404,040 samples, 0.36%)</title><rect x="644.1" y="245" width="4.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="647.08" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (10,101,010 samples, 0.09%)</title><rect x="106.7" y="325" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="109.65" y="335.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (434,343,430 samples, 3.87%)</title><rect x="720.5" y="325" width="45.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="723.55" y="335.5" >allo..</text>
</g>
<g >
<title>schedule (20,202,020 samples, 0.18%)</title><rect x="116.2" y="341" width="2.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="119.21" y="351.5" ></text>
</g>
<g >
<title>__check_object_size (80,808,080 samples, 0.72%)</title><rect x="179.9" y="293" width="8.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="182.94" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (10,101,010 samples, 0.09%)</title><rect x="609.0" y="133" width="1.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="612.03" y="143.5" ></text>
</g>
<g >
<title>&lt;bytes::bytes_mut::BytesMut as tun_rs::platform::linux::offload::ExpandBuffer&gt;::buf_extend_from_slice (20,202,020 samples, 0.18%)</title><rect x="11.1" y="485" width="2.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="14.06" y="495.5" ></text>
</g>
<g >
<title>ip_finish_output2 (50,505,050 samples, 0.45%)</title><rect x="303.1" y="117" width="5.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="306.14" y="127.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::checksum_valid (111,111,110 samples, 0.99%)</title><rect x="1147.5" y="485" width="11.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1150.52" y="495.5" ></text>
</g>
<g >
<title>rcu_read_unlock_strict (10,101,010 samples, 0.09%)</title><rect x="86.5" y="357" width="1.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="89.47" y="367.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::gso_split (70,707,070 samples, 0.63%)</title><rect x="1159.2" y="485" width="7.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.20" y="495.5" ></text>
</g>
<g >
<title>ip_rcv_core.isra.0 (50,505,050 samples, 0.45%)</title><rect x="635.6" y="293" width="5.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="638.58" y="303.5" ></text>
</g>
<g >
<title>__lock_text_start (2,353,535,330 samples, 20.97%)</title><rect x="342.4" y="165" width="247.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="345.44" y="175.5" >__lock_text_start</text>
</g>
<g >
<title>skb_release_data (10,101,010 samples, 0.09%)</title><rect x="114.1" y="325" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="117.09" y="335.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (666,666,660 samples, 5.94%)</title><rect x="118.3" y="341" width="70.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="121.33" y="351.5" >skb_cop..</text>
</g>
<g >
<title>add_wait_queue (10,101,010 samples, 0.09%)</title><rect x="106.7" y="341" width="1.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="109.65" y="351.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2,353,535,330 samples, 20.97%)</title><rect x="342.4" y="181" width="247.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="345.44" y="191.5" >__wake_up_common_lock</text>
</g>
<g >
<title>tcp_rcv_established (3,252,525,220 samples, 28.98%)</title><rect x="291.5" y="213" width="342.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="294.46" y="223.5" >tcp_rcv_established</text>
</g>
<g >
<title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (525,252,520 samples, 4.68%)</title><rect x="13.2" y="469" width="55.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.19" y="479.5" >&lt;std:..</text>
</g>
<g >
<title>ksys_read (989,898,980 samples, 8.82%)</title><rect x="84.3" y="421" width="104.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="87.35" y="431.5" >ksys_read</text>
</g>
<g >
<title>__read (1,050,505,040 samples, 9.36%)</title><rect x="80.1" y="469" width="110.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="83.10" y="479.5" >__read</text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::checksum (101,010,100 samples, 0.90%)</title><rect x="792.8" y="485" width="10.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="795.77" y="495.5" ></text>
</g>
<g >
<title>nf_hook_slow (30,303,030 samples, 0.27%)</title><rect x="649.4" y="293" width="3.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="652.39" y="303.5" ></text>
</g>
<g >
<title>new_sync_read (888,888,880 samples, 7.92%)</title><rect x="95.0" y="389" width="93.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="97.97" y="399.5" >new_sync_read</text>
</g>
<g >
<title>read_tsc (10,101,010 samples, 0.09%)</title><rect x="632.4" y="165" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="635.39" y="175.5" ></text>
</g>
<g >
<title>ipv4_dst_check (10,101,010 samples, 0.09%)</title><rect x="648.3" y="245" width="1.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="651.33" y="255.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.0 (10,101,010 samples, 0.09%)</title><rect x="315.9" y="197" width="1.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="318.89" y="207.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::checksum_no_fold (3,141,414,110 samples, 27.99%)</title><rect x="803.4" y="485" width="330.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="806.39" y="495.5" >tun_rs::platform::linux::checksum::checksum_..</text>
</g>
<g >
<title>__skb_clone (10,101,010 samples, 0.09%)</title><rect x="308.5" y="149" width="1.0" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="311.45" y="159.5" ></text>
</g>
<g >
<title>tcp_v4_early_demux (70,707,070 samples, 0.63%)</title><rect x="642.0" y="261" width="7.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="644.95" y="271.5" ></text>
</g>
<g >
<title>sch_direct_xmit (30,303,030 samples, 0.27%)</title><rect x="305.3" y="85" width="3.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="308.27" y="95.5" ></text>
</g>
<g >
<title>copyin (525,252,520 samples, 4.68%)</title><rect x="661.1" y="309" width="55.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="664.07" y="319.5" >copyin</text>
</g>
<g >
<title>tun_rs::platform::linux::device::DeviceImpl::recv_multiple0 (30,303,030 samples, 0.27%)</title><rect x="225.6" y="469" width="3.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="228.61" y="479.5" ></text>
</g>
<g >
<title>__fget_light (40,404,040 samples, 0.36%)</title><rect x="273.4" y="389" width="4.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="276.40" y="399.5" ></text>
</g>
<g >
<title>ip_rcv_finish (80,808,080 samples, 0.72%)</title><rect x="640.9" y="293" width="8.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="643.89" y="303.5" ></text>
</g>
<g >
<title>sk_stream_write_space (181,818,180 samples, 1.62%)</title><rect x="612.2" y="181" width="19.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="615.21" y="191.5" ></text>
</g>
<g >
<title>free_compound_page (10,101,010 samples, 0.09%)</title><rect x="609.0" y="149" width="1.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="612.03" y="159.5" ></text>
</g>
<g >
<title>__ksize (50,505,050 samples, 0.45%)</title><rect x="760.9" y="293" width="5.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="763.91" y="303.5" ></text>
</g>
<g >
<title>bytes::bytes_mut::BytesMut::resize (141,414,140 samples, 1.26%)</title><rect x="190.6" y="469" width="14.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="193.56" y="479.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::handle_gro (20,202,020 samples, 0.18%)</title><rect x="1166.6" y="485" width="2.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1169.63" y="495.5" ></text>
</g>
<g >
<title>ksys_write (4,707,070,660 samples, 41.94%)</title><rect x="272.3" y="421" width="495.0" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="275.34" y="431.5" >ksys_write</text>
</g>
<g >
<title>__tcp_transmit_skb (232,323,230 samples, 2.07%)</title><rect x="316.9" y="197" width="24.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="319.95" y="207.5" >_..</text>
</g>
<g >
<title>vfs_read (959,595,950 samples, 8.55%)</title><rect x="87.5" y="405" width="100.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="90.53" y="415.5" >vfs_read</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::ip_headers_can_coalesce (10,101,010 samples, 0.09%)</title><rect x="261.7" y="469" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="264.72" y="479.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (3,252,525,220 samples, 28.98%)</title><rect x="291.5" y="229" width="342.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="294.46" y="239.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::pseudo_header_checksum_no_fold (30,303,030 samples, 0.27%)</title><rect x="1133.7" y="485" width="3.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1136.71" y="495.5" ></text>
</g>
<g >
<title>rb_insert_color (10,101,010 samples, 0.09%)</title><rect x="310.6" y="149" width="1.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="313.58" y="159.5" ></text>
</g>
<g >
<title>ktime_get (20,202,020 samples, 0.18%)</title><rect x="631.3" y="181" width="2.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="634.33" y="191.5" ></text>
</g>
<g >
<title>ip_finish_output (10,101,010 samples, 0.09%)</title><rect x="302.1" y="117" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="305.08" y="127.5" ></text>
</g>
<g >
<title>sock_def_readable (212,121,210 samples, 1.89%)</title><rect x="319.1" y="69" width="22.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="322.07" y="79.5" >s..</text>
</g>
<g >
<title>__qdisc_run (10,101,010 samples, 0.09%)</title><rect x="304.2" y="85" width="1.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="307.20" y="95.5" ></text>
</g>
<g >
<title>netif_receive_skb (3,484,848,450 samples, 31.05%)</title><rect x="286.1" y="341" width="366.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="289.15" y="351.5" >netif_receive_skb</text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.09%)</title><rect x="113.0" y="325" width="1.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="116.02" y="335.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::tcp_gro (30,303,030 samples, 0.27%)</title><rect x="262.8" y="469" width="3.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="265.78" y="479.5" ></text>
</g>
<g >
<title>iptable_mangle_hook (10,101,010 samples, 0.09%)</title><rect x="300.0" y="85" width="1.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="302.95" y="95.5" ></text>
</g>
<g >
<title>[unknown] (7,171,717,100 samples, 63.91%)</title><rect x="13.2" y="485" width="754.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.19" y="495.5" >[unknown]</text>
</g>
<g >
<title>consume_skb (70,707,070 samples, 0.63%)</title><rect x="107.7" y="341" width="7.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="110.71" y="351.5" ></text>
</g>
<g >
<title>ipt_do_table (10,101,010 samples, 0.09%)</title><rect x="300.0" y="69" width="1.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="302.95" y="79.5" ></text>
</g>
<g >
<title>__fsnotify_parent (10,101,010 samples, 0.09%)</title><rect x="93.9" y="389" width="1.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="96.91" y="399.5" ></text>
</g>
<g >
<title>tun-rs-sync-gso (11,222,222,110 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >tun-rs-sync-gso</text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.09%)</title><rect x="314.8" y="117" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="317.82" y="127.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (10,101,010 samples, 0.09%)</title><rect x="314.8" y="165" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="317.82" y="175.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (10,101,010 samples, 0.09%)</title><rect x="309.5" y="165" width="1.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="312.51" y="175.5" ></text>
</g>
<g >
<title>ip_rcv (3,474,747,440 samples, 30.96%)</title><rect x="287.2" y="309" width="365.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="290.21" y="319.5" >ip_rcv</text>
</g>
<g >
<title>ip_finish_output2 (222,222,220 samples, 1.98%)</title><rect x="318.0" y="149" width="23.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="321.01" y="159.5" >i..</text>
</g>
<g >
<title>ip_local_out (30,303,030 samples, 0.27%)</title><rect x="297.8" y="133" width="3.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="300.83" y="143.5" ></text>
</g>
<g >
<title>nf_hook_slow (20,202,020 samples, 0.18%)</title><rect x="633.5" y="277" width="2.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="636.46" y="287.5" ></text>
</g>
<g >
<title>tun_do_read (878,787,870 samples, 7.83%)</title><rect x="96.0" y="357" width="92.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="99.03" y="367.5" >tun_do_read</text>
</g>
<g >
<title>new_sync_write (4,636,363,590 samples, 41.31%)</title><rect x="279.8" y="389" width="487.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="282.77" y="399.5" >new_sync_write</text>
</g>
<g >
<title>__nss_database_lookup (70,707,070 samples, 0.63%)</title><rect x="68.4" y="469" width="7.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="71.42" y="479.5" ></text>
</g>
<g >
<title>ipt_do_table (10,101,010 samples, 0.09%)</title><rect x="298.9" y="85" width="1.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="301.89" y="95.5" ></text>
</g>
<g >
<title>_copy_to_iter (10,101,010 samples, 0.09%)</title><rect x="105.6" y="341" width="1.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="108.59" y="351.5" ></text>
</g>
<g >
<title>mod_timer (10,101,010 samples, 0.09%)</title><rect x="314.8" y="133" width="1.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="317.82" y="143.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::insert (10,101,010 samples, 0.09%)</title><rect x="245.8" y="469" width="1.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="248.79" y="479.5" ></text>
</g>
<g >
<title>__fget_files (30,303,030 samples, 0.27%)</title><rect x="84.3" y="373" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="87.35" y="383.5" ></text>
</g>
<g >
<title>ip_local_deliver (3,313,131,280 samples, 29.52%)</title><rect x="287.2" y="293" width="348.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="290.21" y="303.5" >ip_local_deliver</text>
</g>
<g >
<title>sock_alloc_send_pskb (474,747,470 samples, 4.23%)</title><rect x="717.4" y="341" width="49.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="720.36" y="351.5" >sock_..</text>
</g>
<g >
<title>__ip_queue_xmit (101,010,100 samples, 0.90%)</title><rect x="297.8" y="149" width="10.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="300.83" y="159.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::GROTable::reset (10,101,010 samples, 0.09%)</title><rect x="228.8" y="469" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="231.79" y="479.5" ></text>
</g>
<g >
<title>__fget_light (30,303,030 samples, 0.27%)</title><rect x="84.3" y="389" width="3.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="87.35" y="399.5" ></text>
</g>
<g >
<title>sock_wfree (50,505,050 samples, 0.45%)</title><rect x="635.6" y="277" width="5.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="638.58" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (303,030,300 samples, 2.70%)</title><rect x="726.9" y="293" width="31.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="729.92" y="303.5" >ge..</text>
</g>
<g >
<title>__kfree_skb (171,717,170 samples, 1.53%)</title><rect x="592.0" y="181" width="18.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="595.03" y="191.5" ></text>
</g>
<g >
<title>nf_hook_slow (30,303,030 samples, 0.27%)</title><rect x="297.8" y="101" width="3.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="300.83" y="111.5" ></text>
</g>
<g >
<title>__ip_local_out (30,303,030 samples, 0.27%)</title><rect x="297.8" y="117" width="3.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="300.83" y="127.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (484,848,480 samples, 4.32%)</title><rect x="122.6" y="277" width="51.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="125.58" y="287.5" >copy_..</text>
</g>
<g >
<title>simple_copy_to_iter (80,808,080 samples, 0.72%)</title><rect x="179.9" y="309" width="8.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="182.94" y="319.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpFlowKey::new (151,515,150 samples, 1.35%)</title><rect x="229.9" y="469" width="15.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="232.86" y="479.5" ></text>
</g>
<g >
<title>write (4,717,171,670 samples, 42.03%)</title><rect x="271.3" y="469" width="496.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="274.28" y="479.5" >write</text>
</g>
<g >
<title>raw_local_deliver (10,101,010 samples, 0.09%)</title><rect x="287.2" y="245" width="1.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="290.21" y="255.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (3,292,929,260 samples, 29.34%)</title><rect x="287.2" y="277" width="346.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="290.21" y="287.5" >ip_local_deliver_finish</text>
</g>
<g >
<title>tcp_mstamp_refresh (20,202,020 samples, 0.18%)</title><rect x="631.3" y="197" width="2.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="634.33" y="207.5" ></text>
</g>
<g >
<title>copy_page_from_iter (555,555,550 samples, 4.95%)</title><rect x="657.9" y="325" width="58.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="660.88" y="335.5" >copy_p..</text>
</g>
<g >
<title>vfs_write (4,636,363,590 samples, 41.31%)</title><rect x="279.8" y="405" width="487.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="282.77" y="415.5" >vfs_write</text>
</g>
<g >
<title>__tcp_push_pending_frames (191,919,190 samples, 1.71%)</title><rect x="295.7" y="197" width="20.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="298.71" y="207.5" ></text>
</g>
<g >
<title>tcp_write_xmit (191,919,190 samples, 1.71%)</title><rect x="295.7" y="181" width="20.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="298.71" y="191.5" ></text>
</g>
<g >
<title>__alloc_skb (70,707,070 samples, 0.63%)</title><rect x="758.8" y="309" width="7.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="761.78" y="319.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (525,252,520 samples, 4.68%)</title><rect x="661.1" y="293" width="55.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="664.07" y="303.5" >copy_..</text>
</g>
<g >
<title>__x64_sys_write (10,101,010 samples, 0.09%)</title><rect x="271.3" y="421" width="1.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="274.28" y="431.5" ></text>
</g>
<g >
<title>__slab_free.isra.0 (40,404,040 samples, 0.36%)</title><rect x="108.8" y="325" width="4.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="111.78" y="335.5" ></text>
</g>
<g >
<title>prep_new_page (30,303,030 samples, 0.27%)</title><rect x="755.6" y="277" width="3.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="758.60" y="287.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (10,101,010 samples, 0.09%)</title><rect x="313.8" y="149" width="1.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="316.76" y="159.5" ></text>
</g>
<g >
<title>__free_pages_ok (80,808,080 samples, 0.72%)</title><rect x="600.5" y="149" width="8.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="603.53" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,717,171,670 samples, 42.03%)</title><rect x="271.3" y="437" width="496.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="274.28" y="447.5" >do_syscall_64</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::lookup_or_insert (80,808,080 samples, 0.72%)</title><rect x="1139.0" y="485" width="8.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1142.02" y="495.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (20,202,020 samples, 0.18%)</title><rect x="188.4" y="421" width="2.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="191.43" y="431.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::packet_is_gro_candidate (70,707,070 samples, 0.63%)</title><rect x="1168.8" y="485" width="7.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1171.76" y="495.5" ></text>
</g>
<g >
<title>sk_reset_timer (10,101,010 samples, 0.09%)</title><rect x="314.8" y="149" width="1.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="317.82" y="159.5" ></text>
</g>
<g >
<title>__check_object_size (10,101,010 samples, 0.09%)</title><rect x="656.8" y="325" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="659.82" y="335.5" ></text>
</g>
<g >
<title>tcp_ack (202,020,200 samples, 1.80%)</title><rect x="589.9" y="197" width="21.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="592.91" y="207.5" >t..</text>
</g>
<g >
<title>tun_chr_write_iter (4,636,363,590 samples, 41.31%)</title><rect x="279.8" y="373" width="487.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="282.77" y="383.5" >tun_chr_write_iter</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::tcp_gro (131,313,130 samples, 1.17%)</title><rect x="1176.2" y="485" width="13.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1179.19" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,010,101,000 samples, 9.00%)</title><rect x="84.3" y="453" width="106.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="87.35" y="463.5" >entry_SYSCALL..</text>
</g>
<g >
<title>mod_timer (20,202,020 samples, 0.18%)</title><rect x="311.6" y="133" width="2.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="314.64" y="143.5" ></text>
</g>
<g >
<title>tun_net_xmit (222,222,220 samples, 1.98%)</title><rect x="318.0" y="85" width="23.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="321.01" y="95.5" >t..</text>
</g>
<g >
<title>__skb_datagram_iter (666,666,660 samples, 5.94%)</title><rect x="118.3" y="325" width="70.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="121.33" y="335.5" >__skb_d..</text>
</g>
<g >
<title>sk_filter_trim_cap (10,101,010 samples, 0.09%)</title><rect x="290.4" y="229" width="1.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="293.40" y="239.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.0 (80,808,080 samples, 0.72%)</title><rect x="640.9" y="277" width="8.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="643.89" y="287.5" ></text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.09%)</title><rect x="592.0" y="165" width="1.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="595.03" y="175.5" ></text>
</g>
<g >
<title>sk_reset_timer (20,202,020 samples, 0.18%)</title><rect x="311.6" y="149" width="2.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="314.64" y="159.5" ></text>
</g>
<g >
<title>tcp_check_space (191,919,190 samples, 1.71%)</title><rect x="611.2" y="197" width="20.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="614.15" y="207.5" ></text>
</g>
<g >
<title>should_failslab (10,101,010 samples, 0.09%)</title><rect x="759.8" y="261" width="1.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="762.85" y="271.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one (191,919,190 samples, 1.71%)</title><rect x="205.4" y="469" width="20.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="208.43" y="479.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (323,232,320 samples, 2.88%)</title><rect x="724.8" y="309" width="34.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="727.80" y="319.5" >__..</text>
</g>
<g >
<title>__fdget_pos (40,404,040 samples, 0.36%)</title><rect x="273.4" y="405" width="4.3" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="276.40" y="415.5" ></text>
</g>
<g >
<title>kmem_cache_free (10,101,010 samples, 0.09%)</title><rect x="115.1" y="341" width="1.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="118.15" y="351.5" ></text>
</g>
<g >
<title>__slab_free.isra.0 (10,101,010 samples, 0.09%)</title><rect x="115.1" y="325" width="1.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="118.15" y="335.5" ></text>
</g>
<g >
<title>__fdget_pos (30,303,030 samples, 0.27%)</title><rect x="84.3" y="405" width="3.2" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="87.35" y="415.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (40,404,040 samples, 0.36%)</title><rect x="310.6" y="165" width="4.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="313.58" y="175.5" ></text>
</g>
<g >
<title>sock_def_readable (2,363,636,340 samples, 21.06%)</title><rect x="341.4" y="197" width="248.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="344.38" y="207.5" >sock_def_readable</text>
</g>
<g >
<title>__dev_queue_xmit (50,505,050 samples, 0.45%)</title><rect x="303.1" y="101" width="5.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="306.14" y="111.5" ></text>
</g>
<g >
<title>_copy_to_iter (575,757,570 samples, 5.13%)</title><rect x="119.4" y="309" width="60.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="122.40" y="319.5" >_copy_..</text>
</g>
<g >
<title>__sched_text_start (20,202,020 samples, 0.18%)</title><rect x="116.2" y="325" width="2.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="119.21" y="335.5" ></text>
</g>
<g >
<title>rb_first (10,101,010 samples, 0.09%)</title><rect x="610.1" y="181" width="1.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="613.09" y="191.5" ></text>
</g>
<g >
<title>all (11,222,222,110 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>ipt_do_table (20,202,020 samples, 0.18%)</title><rect x="633.5" y="261" width="2.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="636.46" y="271.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::lookup_or_insert (141,414,140 samples, 1.26%)</title><rect x="246.8" y="469" width="14.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="249.85" y="479.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (222,222,220 samples, 1.98%)</title><rect x="318.0" y="101" width="23.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="321.01" y="111.5" >d..</text>
</g>
<g >
<title>skb_copy_datagram_from_iter (606,060,600 samples, 5.40%)</title><rect x="652.6" y="341" width="63.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="655.57" y="351.5" >skb_cop..</text>
</g>
<g >
<title>__netif_receive_skb_one_core (3,484,848,450 samples, 31.05%)</title><rect x="286.1" y="325" width="366.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="289.15" y="335.5" >__netif_receive_skb_one_core</text>
</g>
<g >
<title>fq_codel_dequeue (10,101,010 samples, 0.09%)</title><rect x="304.2" y="69" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="307.20" y="79.5" ></text>
</g>
<g >
<title>copyout (10,101,010 samples, 0.09%)</title><rect x="105.6" y="325" width="1.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="108.59" y="335.5" ></text>
</g>
<g >
<title>__lock_text_start (212,121,210 samples, 1.89%)</title><rect x="319.1" y="37" width="22.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="322.07" y="47.5" >_..</text>
</g>
<g >
<title>tun_rs::platform::linux::device::DeviceImpl::recv_multiple0 (20,202,020 samples, 0.18%)</title><rect x="1136.9" y="485" width="2.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1139.89" y="495.5" ></text>
</g>
<g >
<title>__alloc_skb (10,101,010 samples, 0.09%)</title><rect x="309.5" y="149" width="1.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="312.51" y="159.5" ></text>
</g>
<g >
<title>skb_release_data (161,616,160 samples, 1.44%)</title><rect x="593.1" y="165" width="17.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="596.10" y="175.5" ></text>
</g>
<g >
<title>tun_rs_sync_gso::copy (50,505,050 samples, 0.45%)</title><rect x="266.0" y="469" width="5.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="268.97" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,717,171,670 samples, 42.03%)</title><rect x="271.3" y="453" width="496.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="274.28" y="463.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>ip_output (70,707,070 samples, 0.63%)</title><rect x="301.0" y="133" width="7.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="304.02" y="143.5" ></text>
</g>
<g >
<title>iptable_raw_hook (10,101,010 samples, 0.09%)</title><rect x="650.5" y="277" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="653.45" y="287.5" ></text>
</g>
<g >
<title>__fget_files (20,202,020 samples, 0.18%)</title><rect x="275.5" y="373" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="278.53" y="383.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (3,282,828,250 samples, 29.25%)</title><rect x="288.3" y="245" width="345.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="291.27" y="255.5" >tcp_v4_rcv</text>
</g>
<g >
<title>sch_direct_xmit (222,222,220 samples, 1.98%)</title><rect x="318.0" y="117" width="23.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="321.01" y="127.5" >s..</text>
</g>
<g >
<title>__virt_addr_valid (40,404,040 samples, 0.36%)</title><rect x="184.2" y="277" width="4.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="187.19" y="287.5" ></text>
</g>
<g >
<title>ip_output (222,222,220 samples, 1.98%)</title><rect x="318.0" y="165" width="23.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="321.01" y="175.5" >i..</text>
</g>
<g >
<title>iptable_mangle_hook (10,101,010 samples, 0.09%)</title><rect x="649.4" y="277" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="652.39" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.09%)</title><rect x="307.4" y="37" width="1.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="310.39" y="47.5" ></text>
</g>
<g >
<title>__lock_text_start (171,717,170 samples, 1.53%)</title><rect x="613.3" y="149" width="18.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="616.28" y="159.5" ></text>
</g>
<g >
<title>__nss_database_lookup (242,424,240 samples, 2.16%)</title><rect x="767.3" y="485" width="25.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="770.28" y="495.5" >_..</text>
</g>
<g >
<title>__lock_text_start (20,202,020 samples, 0.18%)</title><rect x="311.6" y="117" width="2.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="314.64" y="127.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10,101,010 samples, 0.09%)</title><rect x="315.9" y="165" width="1.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="318.89" y="175.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (222,222,220 samples, 1.98%)</title><rect x="318.0" y="133" width="23.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="321.01" y="143.5" >_..</text>
</g>
<g >
<title>dev_hard_start_xmit (30,303,030 samples, 0.27%)</title><rect x="305.3" y="69" width="3.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="308.27" y="79.5" ></text>
</g>
<g >
<title>copyout (545,454,540 samples, 4.86%)</title><rect x="122.6" y="293" width="57.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="125.58" y="303.5" >copyout</text>
</g>
<g >
<title>skb_set_owner_w (10,101,010 samples, 0.09%)</title><rect x="766.2" y="325" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="769.22" y="335.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.0 (10,101,010 samples, 0.09%)</title><rect x="309.5" y="133" width="1.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="312.51" y="143.5" ></text>
</g>
<g >
<title>__virt_addr_valid (10,101,010 samples, 0.09%)</title><rect x="656.8" y="309" width="1.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="659.82" y="319.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (171,717,170 samples, 1.53%)</title><rect x="613.3" y="165" width="18.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="616.28" y="175.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (60,606,060 samples, 0.54%)</title><rect x="173.6" y="277" width="6.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="176.56" y="287.5" ></text>
</g>
</g>
</svg>
