<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>sk_stream_alloc_skb (10,101,010 samples, 0.09%)</title><rect x="769.5" y="197" width="1.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="772.50" y="207.5" ></text>
</g>
<g >
<title>sock_def_readable (2,303,030,280 samples, 20.99%)</title><rect x="795.6" y="229" width="247.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="798.58" y="239.5" >sock_def_readable</text>
</g>
<g >
<title>bytes::bytes_mut::BytesMut::resize (181,818,180 samples, 1.66%)</title><rect x="277.3" y="501" width="19.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="280.29" y="511.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.09%)</title><rect x="670.6" y="405" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="673.63" y="415.5" ></text>
</g>
<g >
<title>skb_copy_datagram_from_iter (565,656,560 samples, 5.16%)</title><rect x="1093.3" y="373" width="60.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1096.30" y="383.5" >skb_co..</text>
</g>
<g >
<title>ep_poll (101,010,100 samples, 0.92%)</title><rect x="301.2" y="421" width="10.9" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="304.20" y="431.5" ></text>
</g>
<g >
<title>tun_chr_poll (40,404,040 samples, 0.37%)</title><rect x="306.6" y="357" width="4.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="309.63" y="367.5" ></text>
</g>
<g >
<title>__read (969,696,960 samples, 8.84%)</title><rect x="171.9" y="501" width="104.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="174.90" y="511.5" >__read</text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::checksum_no_fold (3,090,909,060 samples, 28.18%)</title><rect x="339.2" y="501" width="332.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="342.23" y="511.5" >tun_rs::platform::linux::checksum::checksum_..</text>
</g>
<g >
<title>ip_rcv (3,161,616,130 samples, 28.82%)</title><rect x="753.2" y="341" width="340.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="756.20" y="351.5" >ip_rcv</text>
</g>
<g >
<title>clock_gettime (10,101,010 samples, 0.09%)</title><rect x="332.7" y="485" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.71" y="495.5" ></text>
</g>
<g >
<title>__slab_alloc.isra.0.constprop.0 (10,101,010 samples, 0.09%)</title><rect x="1184.6" y="309" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1187.57" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (272,727,270 samples, 2.49%)</title><rect x="1154.1" y="341" width="29.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1157.14" y="351.5" >__..</text>
</g>
<g >
<title>__lock_text_start (161,616,160 samples, 1.47%)</title><rect x="777.1" y="69" width="17.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="780.11" y="79.5" ></text>
</g>
<g >
<title>tun_chr_read_iter (868,686,860 samples, 7.92%)</title><rect x="179.5" y="405" width="93.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="182.50" y="415.5" >tun_chr_rea..</text>
</g>
<g >
<title>[unknown] (1,090,909,080 samples, 9.94%)</title><rect x="16.5" y="501" width="117.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="19.52" y="511.5" >[unknown]</text>
</g>
<g >
<title>asm_exc_page_fault (10,101,010 samples, 0.09%)</title><rect x="295.8" y="485" width="1.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="298.76" y="495.5" ></text>
</g>
<g >
<title>__inet_lookup_established (20,202,020 samples, 0.18%)</title><rect x="1085.7" y="277" width="2.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1088.69" y="287.5" ></text>
</g>
<g >
<title>sk_stream_write_space (80,808,080 samples, 0.74%)</title><rect x="1056.4" y="213" width="8.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1059.35" y="223.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (161,616,160 samples, 1.47%)</title><rect x="757.6" y="229" width="17.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="760.55" y="239.5" ></text>
</g>
<g >
<title>new_sync_write (4,101,010,060 samples, 37.38%)</title><rect x="745.6" y="421" width="441.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="748.60" y="431.5" >new_sync_write</text>
</g>
<g >
<title>__wake_up_common_lock (161,616,160 samples, 1.47%)</title><rect x="777.1" y="85" width="17.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="780.11" y="95.5" ></text>
</g>
<g >
<title>ip_output (90,909,090 samples, 0.83%)</title><rect x="757.6" y="165" width="9.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="760.55" y="175.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (70,707,070 samples, 0.64%)</title><rect x="1057.4" y="197" width="7.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1060.44" y="207.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::lookup_or_insert (20,202,020 samples, 0.18%)</title><rect x="679.3" y="501" width="2.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="682.32" y="511.5" ></text>
</g>
<g >
<title>skb_gso_validate_network_len (10,101,010 samples, 0.09%)</title><rect x="757.6" y="133" width="1.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="760.55" y="143.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (727,272,720 samples, 6.63%)</title><rect x="194.7" y="357" width="78.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="197.71" y="367.5" >__skb_dat..</text>
</g>
<g >
<title>tokio::runtime::task::raw::poll (10,101,010 samples, 0.09%)</title><rect x="93.7" y="485" width="1.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="96.66" y="495.5" ></text>
</g>
<g >
<title>tcp_write_xmit (161,616,160 samples, 1.47%)</title><rect x="757.6" y="213" width="17.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="760.55" y="223.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::future::future::Future&gt;::poll (20,202,020 samples, 0.18%)</title><rect x="14.3" y="501" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="17.35" y="511.5" ></text>
</g>
<g >
<title>ipt_do_table (10,101,010 samples, 0.09%)</title><rect x="766.2" y="133" width="1.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="769.24" y="143.5" ></text>
</g>
<g >
<title>&lt;bytes::bytes_mut::BytesMut as tun_rs::platform::linux::offload::ExpandBuffer&gt;::buf_extend_from_slice (30,303,030 samples, 0.28%)</title><rect x="11.1" y="501" width="3.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="14.09" y="511.5" ></text>
</g>
<g >
<title>__alloc_skb (20,202,020 samples, 0.18%)</title><rect x="1183.5" y="341" width="2.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1186.48" y="351.5" ></text>
</g>
<g >
<title>copyin (525,252,520 samples, 4.79%)</title><rect x="1097.6" y="341" width="56.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1100.64" y="351.5" >copyin</text>
</g>
<g >
<title>do_softirq_own_stack (10,101,010 samples, 0.09%)</title><rect x="670.6" y="437" width="1.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="673.63" y="447.5" ></text>
</g>
<g >
<title>__check_heap_object (10,101,010 samples, 0.09%)</title><rect x="265.3" y="309" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="268.34" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (121,212,120 samples, 1.10%)</title><rect x="301.2" y="453" width="13.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="304.20" y="463.5" ></text>
</g>
<g >
<title>ipv4_dst_check (40,404,040 samples, 0.37%)</title><rect x="1087.9" y="277" width="4.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1090.86" y="287.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::ops::drop::Drop&gt;::drop (10,101,010 samples, 0.09%)</title><rect x="55.6" y="469" width="1.1" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="58.64" y="479.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (2,969,696,940 samples, 27.07%)</title><rect x="755.4" y="293" width="319.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="758.38" y="303.5" >ip_protocol_deliver_rcu</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpFlowKey::new (20,202,020 samples, 0.18%)</title><rect x="676.1" y="501" width="2.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="679.06" y="511.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (10,101,010 samples, 0.09%)</title><rect x="764.1" y="53" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="767.07" y="63.5" ></text>
</g>
<g >
<title>sock_def_readable (20,202,020 samples, 0.18%)</title><rect x="763.0" y="69" width="2.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="765.98" y="79.5" ></text>
</g>
<g >
<title>tcp_try_coalesce (10,101,010 samples, 0.09%)</title><rect x="1073.7" y="213" width="1.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1076.74" y="223.5" ></text>
</g>
<g >
<title>epoll_wait (161,616,160 samples, 1.47%)</title><rect x="297.9" y="501" width="17.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="300.94" y="511.5" ></text>
</g>
<g >
<title>ksys_write (4,111,111,070 samples, 37.48%)</title><rect x="744.5" y="453" width="442.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="747.51" y="463.5" >ksys_write</text>
</g>
<g >
<title>read_tsc (10,101,010 samples, 0.09%)</title><rect x="768.4" y="181" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="771.42" y="191.5" ></text>
</g>
<g >
<title>netif_receive_skb (3,181,818,150 samples, 29.01%)</title><rect x="751.0" y="373" width="342.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="754.03" y="383.5" >netif_receive_skb</text>
</g>
<g >
<title>tun_net_xmit (171,717,170 samples, 1.57%)</title><rect x="776.0" y="117" width="18.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="779.02" y="127.5" ></text>
</g>
<g >
<title>__lock_text_start (2,282,828,260 samples, 20.81%)</title><rect x="797.8" y="197" width="245.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="800.75" y="207.5" >__lock_text_start</text>
</g>
<g >
<title>dev_hard_start_xmit (171,717,170 samples, 1.57%)</title><rect x="776.0" y="133" width="18.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="779.02" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_futex (30,303,030 samples, 0.28%)</title><rect x="318.6" y="453" width="3.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="321.58" y="463.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.09%)</title><rect x="764.1" y="37" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="767.07" y="47.5" ></text>
</g>
<g >
<title>sch_direct_xmit (171,717,170 samples, 1.57%)</title><rect x="776.0" y="149" width="18.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="779.02" y="159.5" ></text>
</g>
<g >
<title>rwsem_optimistic_spin (10,101,010 samples, 0.09%)</title><rect x="295.8" y="421" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="298.76" y="431.5" ></text>
</g>
<g >
<title>skb_try_coalesce (10,101,010 samples, 0.09%)</title><rect x="1073.7" y="197" width="1.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1076.74" y="207.5" ></text>
</g>
<g >
<title>ip_output (191,919,190 samples, 1.75%)</title><rect x="774.9" y="197" width="20.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="777.94" y="207.5" ></text>
</g>
<g >
<title>skb_release_data (20,202,020 samples, 0.18%)</title><rect x="192.5" y="357" width="2.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="195.54" y="367.5" ></text>
</g>
<g >
<title>lock_timer_base (10,101,010 samples, 0.09%)</title><rect x="773.8" y="149" width="1.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="776.85" y="159.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2,292,929,270 samples, 20.90%)</title><rect x="796.7" y="213" width="246.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="799.67" y="223.5" >__wake_up_common_lock</text>
</g>
<g >
<title>write (4,242,424,200 samples, 38.67%)</title><rect x="733.6" y="501" width="456.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="736.65" y="511.5" >write</text>
</g>
<g >
<title>nf_hook_slow (10,101,010 samples, 0.09%)</title><rect x="1092.2" y="325" width="1.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1095.21" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::time::Driver::park_internal (20,202,020 samples, 0.18%)</title><rect x="331.6" y="501" width="2.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="334.62" y="511.5" ></text>
</g>
<g >
<title>__check_object_size (131,313,130 samples, 1.20%)</title><rect x="258.8" y="325" width="14.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="261.82" y="335.5" ></text>
</g>
<g >
<title>neigh_connected_output (10,101,010 samples, 0.09%)</title><rect x="794.5" y="165" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="797.49" y="175.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (565,656,560 samples, 5.16%)</title><rect x="195.8" y="309" width="60.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="198.80" y="319.5" >copy_u..</text>
</g>
<g >
<title>__dev_queue_xmit (171,717,170 samples, 1.57%)</title><rect x="776.0" y="165" width="18.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="779.02" y="175.5" ></text>
</g>
<g >
<title>mod_timer (20,202,020 samples, 0.18%)</title><rect x="770.6" y="165" width="2.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="773.59" y="175.5" ></text>
</g>
<g >
<title>ksys_read (909,090,900 samples, 8.29%)</title><rect x="175.2" y="453" width="97.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="178.16" y="463.5" >ksys_read</text>
</g>
<g >
<title>__fget_files (10,101,010 samples, 0.09%)</title><rect x="177.3" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="180.33" y="415.5" ></text>
</g>
<g >
<title>cpumask_next_and (10,101,010 samples, 0.09%)</title><rect x="670.6" y="357" width="1.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="673.63" y="367.5" ></text>
</g>
<g >
<title>futex_wake (30,303,030 samples, 0.28%)</title><rect x="318.6" y="421" width="3.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="321.58" y="431.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.09%)</title><rect x="295.8" y="453" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="298.76" y="463.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (10,101,010 samples, 0.09%)</title><rect x="772.8" y="181" width="1.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="775.76" y="191.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.09%)</title><rect x="761.9" y="69" width="1.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="764.90" y="79.5" ></text>
</g>
<g >
<title>rwsem_down_read_slowpath (10,101,010 samples, 0.09%)</title><rect x="295.8" y="437" width="1.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="298.76" y="447.5" ></text>
</g>
<g >
<title>tun_rs::platform::unix::device::&lt;impl tun_rs::platform::linux::device::DeviceImpl&gt;::recv (10,101,010 samples, 0.09%)</title><rect x="721.7" y="501" width="1.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="724.69" y="511.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::checksum (40,404,040 samples, 0.37%)</title><rect x="334.9" y="501" width="4.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="337.88" y="511.5" ></text>
</g>
<g >
<title>sock_def_readable (161,616,160 samples, 1.47%)</title><rect x="777.1" y="101" width="17.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="780.11" y="111.5" ></text>
</g>
<g >
<title>tokio::runtime::io::registration::Registration::readiness::{{closure}} (10,101,010 samples, 0.09%)</title><rect x="58.9" y="469" width="1.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="61.90" y="479.5" ></text>
</g>
<g >
<title>wake_up_q (30,303,030 samples, 0.28%)</title><rect x="318.6" y="405" width="3.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="321.58" y="415.5" ></text>
</g>
<g >
<title>__fsnotify_parent (10,101,010 samples, 0.09%)</title><rect x="178.4" y="421" width="1.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="181.42" y="431.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::checksum_valid (80,808,080 samples, 0.74%)</title><rect x="681.5" y="501" width="8.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="684.49" y="511.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::tcp_gro (10,101,010 samples, 0.09%)</title><rect x="129.5" y="485" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="132.52" y="495.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (40,404,040 samples, 0.37%)</title><rect x="761.9" y="101" width="4.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="764.90" y="111.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (90,909,090 samples, 0.83%)</title><rect x="757.6" y="181" width="9.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="760.55" y="191.5" ></text>
</g>
<g >
<title>copyout (20,202,020 samples, 0.18%)</title><rect x="188.2" y="357" width="2.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="191.20" y="367.5" ></text>
</g>
<g >
<title>rwsem_spin_on_owner (10,101,010 samples, 0.09%)</title><rect x="295.8" y="405" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="298.76" y="415.5" ></text>
</g>
<g >
<title>__lock_text_start (70,707,070 samples, 0.64%)</title><rect x="1057.4" y="181" width="7.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1060.44" y="191.5" ></text>
</g>
<g >
<title>tokio-runtime-w (10,969,696,860 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >tokio-runtime-w</text>
</g>
<g >
<title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10,101,010 samples, 0.09%)</title><rect x="315.3" y="501" width="1.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="318.32" y="511.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (303,030,300 samples, 2.76%)</title><rect x="1154.1" y="373" width="32.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1157.14" y="383.5" >so..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,151,515,110 samples, 37.85%)</title><rect x="743.4" y="485" width="446.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="746.43" y="495.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>sock_wfree (40,404,040 samples, 0.37%)</title><rect x="1079.2" y="309" width="4.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1082.17" y="319.5" ></text>
</g>
<g >
<title>ktime_get (10,101,010 samples, 0.09%)</title><rect x="768.4" y="197" width="1.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="771.42" y="207.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one (181,818,180 samples, 1.66%)</title><rect x="68.7" y="485" width="19.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="71.67" y="495.5" ></text>
</g>
<g >
<title>copy_page_from_iter (555,555,550 samples, 5.06%)</title><rect x="1094.4" y="357" width="59.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1097.38" y="367.5" >copy_p..</text>
</g>
<g >
<title>copy_user_generic_unrolled (20,202,020 samples, 0.18%)</title><rect x="188.2" y="341" width="2.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="191.20" y="351.5" ></text>
</g>
<g >
<title>kfree (20,202,020 samples, 0.18%)</title><rect x="190.4" y="357" width="2.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="193.37" y="367.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (30,303,030 samples, 0.28%)</title><rect x="1186.7" y="453" width="3.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1189.74" y="463.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::future::future::Future&gt;::poll (10,101,010 samples, 0.09%)</title><rect x="54.5" y="469" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="57.55" y="479.5" ></text>
</g>
<g >
<title>sk_reset_timer (10,101,010 samples, 0.09%)</title><rect x="773.8" y="181" width="1.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="776.85" y="191.5" ></text>
</g>
<g >
<title>_copy_to_iter (585,858,580 samples, 5.34%)</title><rect x="195.8" y="341" width="63.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="198.80" y="351.5" >_copy_..</text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.09%)</title><rect x="670.6" y="453" width="1.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="673.63" y="463.5" ></text>
</g>
<g >
<title>__ip_finish_output (10,101,010 samples, 0.09%)</title><rect x="774.9" y="181" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="777.94" y="191.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (2,959,595,930 samples, 26.98%)</title><rect x="756.5" y="261" width="318.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="759.46" y="271.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::tcp_gro (131,313,130 samples, 1.20%)</title><rect x="707.6" y="501" width="14.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="710.57" y="511.5" ></text>
</g>
<g >
<title>rebalance_domains (10,101,010 samples, 0.09%)</title><rect x="670.6" y="389" width="1.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="673.63" y="399.5" ></text>
</g>
<g >
<title>clock_gettime (10,101,010 samples, 0.09%)</title><rect x="296.9" y="501" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="299.85" y="511.5" ></text>
</g>
<g >
<title>_find_next_bit.constprop.0 (10,101,010 samples, 0.09%)</title><rect x="670.6" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="673.63" y="351.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (30,303,030 samples, 0.28%)</title><rect x="770.6" y="197" width="3.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="773.59" y="207.5" ></text>
</g>
<g >
<title>__fsnotify_parent (10,101,010 samples, 0.09%)</title><rect x="744.5" y="421" width="1.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="747.51" y="431.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::gso_split (60,606,060 samples, 0.55%)</title><rect x="690.2" y="501" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="693.18" y="511.5" ></text>
</g>
<g >
<title>consume_skb (40,404,040 samples, 0.37%)</title><rect x="190.4" y="373" width="4.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="193.37" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (10,101,010 samples, 0.09%)</title><rect x="330.5" y="501" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="333.53" y="511.5" ></text>
</g>
<g >
<title>ip_rcv_core.isra.0 (60,606,060 samples, 0.55%)</title><rect x="1077.0" y="325" width="6.5" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1080.00" y="335.5" ></text>
</g>
<g >
<title>copyin (20,202,020 samples, 0.18%)</title><rect x="748.9" y="357" width="2.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="751.86" y="367.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (2,969,696,940 samples, 27.07%)</title><rect x="755.4" y="277" width="319.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="758.38" y="287.5" >tcp_v4_rcv</text>
</g>
<g >
<title>read_tsc (30,303,030 samples, 0.28%)</title><rect x="1067.2" y="197" width="3.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1070.22" y="207.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (515,151,510 samples, 4.70%)</title><rect x="1098.7" y="325" width="55.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1101.73" y="335.5" >copy_..</text>
</g>
<g >
<title>nf_hook_slow (20,202,020 samples, 0.18%)</title><rect x="1074.8" y="309" width="2.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1077.83" y="319.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpFlowKey::new (222,222,220 samples, 2.03%)</title><rect x="95.8" y="485" width="23.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="98.84" y="495.5" >t..</text>
</g>
<g >
<title>__alloc_skb (10,101,010 samples, 0.09%)</title><rect x="769.5" y="181" width="1.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="772.50" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (10,101,010 samples, 0.09%)</title><rect x="89.3" y="485" width="1.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="92.32" y="495.5" ></text>
</g>
<g >
<title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (40,404,040 samples, 0.37%)</title><rect x="324.0" y="501" width="4.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="327.01" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (141,414,140 samples, 1.29%)</title><rect x="300.1" y="485" width="15.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="303.11" y="495.5" ></text>
</g>
<g >
<title>fput_many (20,202,020 samples, 0.18%)</title><rect x="312.1" y="421" width="2.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="315.06" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10,101,010 samples, 0.09%)</title><rect x="769.5" y="165" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="772.50" y="175.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::handle_gro (80,808,080 samples, 0.74%)</title><rect x="696.7" y="501" width="8.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="699.70" y="511.5" ></text>
</g>
<g >
<title>tun_net_xmit (40,404,040 samples, 0.37%)</title><rect x="761.9" y="85" width="4.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="764.90" y="95.5" ></text>
</g>
<g >
<title>do_futex (30,303,030 samples, 0.28%)</title><rect x="318.6" y="437" width="3.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="321.58" y="447.5" ></text>
</g>
<g >
<title>__kfree_skb (111,111,110 samples, 1.01%)</title><rect x="1044.4" y="213" width="12.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1047.40" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (30,303,030 samples, 0.28%)</title><rect x="318.6" y="485" width="3.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="321.58" y="495.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (60,606,060 samples, 0.55%)</title><rect x="759.7" y="133" width="6.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="762.72" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (949,494,940 samples, 8.66%)</title><rect x="174.1" y="485" width="102.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="177.07" y="495.5" >entry_SYSCAL..</text>
</g>
<g >
<title>__ip_queue_xmit (191,919,190 samples, 1.75%)</title><rect x="774.9" y="213" width="20.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="777.94" y="223.5" ></text>
</g>
<g >
<title>tun_rs::platform::unix::device::&lt;impl tun_rs::platform::linux::device::DeviceImpl&gt;::send (20,202,020 samples, 0.18%)</title><rect x="722.8" y="501" width="2.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="725.78" y="511.5" ></text>
</g>
<g >
<title>tun_get_user (4,080,808,040 samples, 37.20%)</title><rect x="747.8" y="389" width="438.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="750.77" y="399.5" >tun_get_user</text>
</g>
<g >
<title>tcp_wfree (10,101,010 samples, 0.09%)</title><rect x="765.2" y="69" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="768.16" y="79.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (30,303,030 samples, 0.28%)</title><rect x="272.9" y="453" width="3.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="275.95" y="463.5" ></text>
</g>
<g >
<title>__fdget_pos (30,303,030 samples, 0.28%)</title><rect x="175.2" y="437" width="3.2" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="178.16" y="447.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.46%)</title><rect x="54.5" y="485" width="5.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="57.55" y="495.5" ></text>
</g>
<g >
<title>lock_timer_base (10,101,010 samples, 0.09%)</title><rect x="771.7" y="149" width="1.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="774.68" y="159.5" ></text>
</g>
<g >
<title>__lock_text_start (30,303,030 samples, 0.28%)</title><rect x="318.6" y="373" width="3.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="321.58" y="383.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::VirtioNetHdr::encode (10,101,010 samples, 0.09%)</title><rect x="126.3" y="485" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="129.26" y="495.5" ></text>
</g>
<g >
<title>ipt_do_table (10,101,010 samples, 0.09%)</title><rect x="1075.9" y="293" width="1.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1078.91" y="303.5" ></text>
</g>
<g >
<title>sysvec_hyperv_stimer0 (10,101,010 samples, 0.09%)</title><rect x="670.6" y="469" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="673.63" y="479.5" ></text>
</g>
<g >
<title>__nss_database_lookup (80,808,080 samples, 0.74%)</title><rect x="60.0" y="485" width="8.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="62.98" y="495.5" ></text>
</g>
<g >
<title>__free_pages_ok (40,404,040 samples, 0.37%)</title><rect x="1050.9" y="181" width="4.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1053.92" y="191.5" ></text>
</g>
<g >
<title>sch_direct_xmit (40,404,040 samples, 0.37%)</title><rect x="761.9" y="117" width="4.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="764.90" y="127.5" ></text>
</g>
<g >
<title>ip_finish_output2 (70,707,070 samples, 0.64%)</title><rect x="758.6" y="149" width="7.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="761.64" y="159.5" ></text>
</g>
<g >
<title>tcp_v4_early_demux (70,707,070 samples, 0.64%)</title><rect x="1084.6" y="293" width="7.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1087.60" y="303.5" ></text>
</g>
<g >
<title>skb_release_data (101,010,100 samples, 0.92%)</title><rect x="1045.5" y="197" width="10.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1048.49" y="207.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (40,404,040 samples, 0.37%)</title><rect x="1070.5" y="229" width="4.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1073.48" y="239.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.0 (80,808,080 samples, 0.74%)</title><rect x="1083.5" y="309" width="8.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1086.52" y="319.5" ></text>
</g>
<g >
<title>tun_rs_async_gso::copy::_$u7b$$u7b$closure$u7d$$u7d$::hb2654f26323abe97 (80,808,080 samples, 0.74%)</title><rect x="725.0" y="501" width="8.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="727.95" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (141,414,140 samples, 1.29%)</title><rect x="300.1" y="469" width="15.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="303.11" y="479.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (10,101,010 samples, 0.09%)</title><rect x="314.2" y="453" width="1.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="317.24" y="463.5" ></text>
</g>
<g >
<title>std::time::Instant::now (10,101,010 samples, 0.09%)</title><rect x="57.8" y="469" width="1.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="60.81" y="479.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (191,919,190 samples, 1.75%)</title><rect x="774.9" y="229" width="20.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="777.94" y="239.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (20,202,020 samples, 0.18%)</title><rect x="751.0" y="341" width="2.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="754.03" y="351.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (3,181,818,150 samples, 29.01%)</title><rect x="751.0" y="357" width="342.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="754.03" y="367.5" >__netif_receive_skb_one_core</text>
</g>
<g >
<title>skb_clone (10,101,010 samples, 0.09%)</title><rect x="767.3" y="181" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="770.33" y="191.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (2,979,797,950 samples, 27.16%)</title><rect x="754.3" y="309" width="320.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="757.29" y="319.5" >ip_local_deliver_finish</text>
</g>
<g >
<title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (10,101,010 samples, 0.09%)</title><rect x="90.4" y="485" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="93.41" y="495.5" ></text>
</g>
<g >
<title>std::time::Instant::saturating_duration_since (10,101,010 samples, 0.09%)</title><rect x="317.5" y="501" width="1.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="320.50" y="511.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (50,505,050 samples, 0.46%)</title><rect x="1065.0" y="229" width="5.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1068.05" y="239.5" ></text>
</g>
<g >
<title>ip_rcv_finish (80,808,080 samples, 0.74%)</title><rect x="1083.5" y="325" width="8.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1086.52" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::io::driver::Driver::turn (10,101,010 samples, 0.09%)</title><rect x="322.9" y="501" width="1.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="325.93" y="511.5" ></text>
</g>
<g >
<title>ipt_do_table (10,101,010 samples, 0.09%)</title><rect x="1092.2" y="309" width="1.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1095.21" y="319.5" ></text>
</g>
<g >
<title>copyout (585,858,580 samples, 5.34%)</title><rect x="195.8" y="325" width="63.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="198.80" y="335.5" >copyout</text>
</g>
<g >
<title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (353,535,350 samples, 3.22%)</title><rect x="16.5" y="485" width="38.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="19.52" y="495.5" >&lt;st..</text>
</g>
<g >
<title>new_sync_read (868,686,860 samples, 7.92%)</title><rect x="179.5" y="421" width="93.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="182.50" y="431.5" >new_sync_read</text>
</g>
<g >
<title>tun_rs::platform::linux::checksum::pseudo_header_checksum_no_fold (30,303,030 samples, 0.28%)</title><rect x="671.7" y="501" width="3.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="674.71" y="511.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,101,010 samples, 0.09%)</title><rect x="296.9" y="485" width="1.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="299.85" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,151,515,110 samples, 37.85%)</title><rect x="743.4" y="469" width="446.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="746.43" y="479.5" >do_syscall_64</text>
</g>
<g >
<title>do_syscall_64 (949,494,940 samples, 8.66%)</title><rect x="174.1" y="469" width="102.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="177.07" y="479.5" >do_syscall_64</text>
</g>
<g >
<title>__nss_database_lookup (10,101,010 samples, 0.09%)</title><rect x="56.7" y="469" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="59.72" y="479.5" ></text>
</g>
<g >
<title>tokio::runtime::task::waker::wake_by_val (10,101,010 samples, 0.09%)</title><rect x="329.4" y="501" width="1.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="332.45" y="511.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (40,404,040 samples, 0.37%)</title><rect x="167.6" y="501" width="4.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="170.55" y="511.5" ></text>
</g>
<g >
<title>sk_reset_timer (20,202,020 samples, 0.18%)</title><rect x="770.6" y="181" width="2.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="773.59" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10,101,010 samples, 0.09%)</title><rect x="328.4" y="501" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="331.36" y="511.5" ></text>
</g>
<g >
<title>tcp_ack (121,212,120 samples, 1.10%)</title><rect x="1043.3" y="229" width="13.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1046.31" y="239.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::insert (10,101,010 samples, 0.09%)</title><rect x="678.2" y="501" width="1.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="681.23" y="511.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::packet_is_gro_candidate (20,202,020 samples, 0.18%)</title><rect x="705.4" y="501" width="2.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="708.40" y="511.5" ></text>
</g>
<g >
<title>exc_page_fault (10,101,010 samples, 0.09%)</title><rect x="295.8" y="469" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="298.76" y="479.5" ></text>
</g>
<g >
<title>load_balance (10,101,010 samples, 0.09%)</title><rect x="670.6" y="373" width="1.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="673.63" y="383.5" ></text>
</g>
<g >
<title>tun_rs_async_gso::copy::_$u7b$$u7b$closure$u7d$$u7d$::hb2654f26323abe97 (30,303,030 samples, 0.28%)</title><rect x="130.6" y="485" width="3.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="133.61" y="495.5" ></text>
</g>
<g >
<title>ep_scan_ready_list.constprop.0 (101,010,100 samples, 0.92%)</title><rect x="301.2" y="405" width="10.9" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="304.20" y="415.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.09%)</title><rect x="770.6" y="149" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="773.59" y="159.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (80,808,080 samples, 0.74%)</title><rect x="302.3" y="373" width="8.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="305.28" y="383.5" ></text>
</g>
<g >
<title>mutex_unlock (10,101,010 samples, 0.09%)</title><rect x="311.0" y="389" width="1.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="313.98" y="399.5" ></text>
</g>
<g >
<title>tun_rs::async_device::unix::&lt;impl tun_rs::async_device::unix::tokio::AsyncDevice&gt;::recv::{{closure}} (10,101,010 samples, 0.09%)</title><rect x="94.8" y="485" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="97.75" y="495.5" ></text>
</g>
<g >
<title>tun_chr_write_iter (4,101,010,060 samples, 37.38%)</title><rect x="745.6" y="405" width="441.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="748.60" y="415.5" >tun_chr_write_iter</text>
</g>
<g >
<title>skb_set_owner_w (10,101,010 samples, 0.09%)</title><rect x="1185.7" y="357" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.65" y="367.5" ></text>
</g>
<g >
<title>ipv4_mtu (10,101,010 samples, 0.09%)</title><rect x="774.9" y="165" width="1.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="777.94" y="175.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (20,202,020 samples, 0.18%)</title><rect x="748.9" y="341" width="2.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="751.86" y="351.5" ></text>
</g>
<g >
<title>ip_local_deliver (2,999,999,970 samples, 27.35%)</title><rect x="754.3" y="325" width="322.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="757.29" y="335.5" >ip_local_deliver</text>
</g>
<g >
<title>pthread_setcanceltype (10,101,010 samples, 0.09%)</title><rect x="316.4" y="501" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="319.41" y="511.5" ></text>
</g>
<g >
<title>_copy_to_iter (30,303,030 samples, 0.28%)</title><rect x="187.1" y="373" width="3.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="190.11" y="383.5" ></text>
</g>
<g >
<title>all (10,969,696,860 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>mod_timer (10,101,010 samples, 0.09%)</title><rect x="773.8" y="165" width="1.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="776.85" y="175.5" ></text>
</g>
<g >
<title>ip_finish_output2 (181,818,180 samples, 1.66%)</title><rect x="776.0" y="181" width="19.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="779.02" y="191.5" ></text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.09%)</title><rect x="1044.4" y="197" width="1.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1047.40" y="207.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::offload::ip_headers_can_coalesce (20,202,020 samples, 0.18%)</title><rect x="127.3" y="485" width="2.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="130.35" y="495.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (20,202,020 samples, 0.18%)</title><rect x="748.9" y="373" width="2.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="751.86" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (10,101,010 samples, 0.09%)</title><rect x="321.8" y="501" width="1.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="324.84" y="511.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (727,272,720 samples, 6.63%)</title><rect x="194.7" y="373" width="78.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="197.71" y="383.5" >skb_copy_..</text>
</g>
<g >
<title>__ksize (10,101,010 samples, 0.09%)</title><rect x="1183.5" y="325" width="1.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1186.48" y="335.5" ></text>
</g>
<g >
<title>free_compound_page (10,101,010 samples, 0.09%)</title><rect x="1055.3" y="181" width="1.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1058.27" y="191.5" ></text>
</g>
<g >
<title>__virt_addr_valid (60,606,060 samples, 0.55%)</title><rect x="266.4" y="309" width="6.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="269.43" y="319.5" ></text>
</g>
<g >
<title>tcp_check_space (80,808,080 samples, 0.74%)</title><rect x="1056.4" y="229" width="8.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1059.35" y="239.5" ></text>
</g>
<g >
<title>tokio::runtime::time::wheel::Wheel::next_expiration (10,101,010 samples, 0.09%)</title><rect x="333.8" y="501" width="1.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="336.79" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (30,303,030 samples, 0.28%)</title><rect x="318.6" y="469" width="3.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="321.58" y="479.5" ></text>
</g>
<g >
<title>vfs_read (878,787,870 samples, 8.01%)</title><rect x="178.4" y="437" width="94.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="181.42" y="447.5" >vfs_read</text>
</g>
<g >
<title>__kfree_skb (10,101,010 samples, 0.09%)</title><rect x="756.5" y="229" width="1.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="759.46" y="239.5" ></text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.09%)</title><rect x="756.5" y="213" width="1.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="759.46" y="223.5" ></text>
</g>
<g >
<title>ktime_get (50,505,050 samples, 0.46%)</title><rect x="1065.0" y="213" width="5.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1068.05" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10,101,010 samples, 0.09%)</title><rect x="1184.6" y="325" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1187.57" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::task::core::TaskIdGuard::enter (20,202,020 samples, 0.18%)</title><rect x="91.5" y="485" width="2.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="94.49" y="495.5" ></text>
</g>
<g >
<title>tcp_rcv_established (2,959,595,930 samples, 26.98%)</title><rect x="756.5" y="245" width="318.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="759.46" y="255.5" >tcp_rcv_established</text>
</g>
<g >
<title>vfs_write (4,111,111,070 samples, 37.48%)</title><rect x="744.5" y="437" width="442.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="747.51" y="447.5" >vfs_write</text>
</g>
<g >
<title>tun_rs::platform::linux::offload::TcpGROTable::lookup_or_insert (60,606,060 samples, 0.55%)</title><rect x="119.7" y="485" width="6.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="122.74" y="495.5" ></text>
</g>
<g >
<title>asm_sysvec_hyperv_stimer0 (10,101,010 samples, 0.09%)</title><rect x="670.6" y="485" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="673.63" y="495.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (101,010,100 samples, 0.92%)</title><rect x="757.6" y="197" width="10.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="760.55" y="207.5" ></text>
</g>
<g >
<title>__ip_finish_output (10,101,010 samples, 0.09%)</title><rect x="757.6" y="149" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="760.55" y="159.5" ></text>
</g>
<g >
<title>f64xsubf128 (10,101,010 samples, 0.09%)</title><rect x="88.2" y="485" width="1.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="91.23" y="495.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (10,101,010 samples, 0.09%)</title><rect x="773.8" y="197" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="776.85" y="207.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,101,010 samples, 0.09%)</title><rect x="276.2" y="501" width="1.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="279.21" y="511.5" ></text>
</g>
<g >
<title>tun_rs::platform::linux::device::DeviceImpl::handle_virtio_read (10,101,010 samples, 0.09%)</title><rect x="675.0" y="501" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="677.97" y="511.5" ></text>
</g>
<g >
<title>do_epoll_wait (121,212,120 samples, 1.10%)</title><rect x="301.2" y="437" width="13.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="304.20" y="447.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (20,202,020 samples, 0.18%)</title><rect x="256.6" y="309" width="2.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="259.65" y="319.5" ></text>
</g>
<g >
<title>tun_sock_write_space (10,101,010 samples, 0.09%)</title><rect x="1082.4" y="293" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1085.43" y="303.5" ></text>
</g>
<g >
<title>ep_send_events_proc (90,909,090 samples, 0.83%)</title><rect x="301.2" y="389" width="9.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="304.20" y="399.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (10,101,010 samples, 0.09%)</title><rect x="670.6" y="421" width="1.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="673.63" y="431.5" ></text>
</g>
<g >
<title>syscall (30,303,030 samples, 0.28%)</title><rect x="318.6" y="501" width="3.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="321.58" y="511.5" ></text>
</g>
<g >
<title>__fget_light (30,303,030 samples, 0.28%)</title><rect x="175.2" y="421" width="3.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="178.16" y="431.5" ></text>
</g>
<g >
<title>nf_hook_slow (10,101,010 samples, 0.09%)</title><rect x="766.2" y="149" width="1.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="769.24" y="159.5" ></text>
</g>
<g >
<title>tun_do_read (848,484,840 samples, 7.73%)</title><rect x="181.7" y="389" width="91.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="184.68" y="399.5" >tun_do_read</text>
</g>
<g >
<title>simple_copy_to_iter (131,313,130 samples, 1.20%)</title><rect x="258.8" y="341" width="14.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="261.82" y="351.5" ></text>
</g>
<g >
<title>__nss_database_lookup (313,131,310 samples, 2.85%)</title><rect x="133.9" y="501" width="33.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="136.87" y="511.5" >__..</text>
</g>
<g >
<title>alloc_skb_with_frags (292,929,290 samples, 2.67%)</title><rect x="1154.1" y="357" width="31.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1157.14" y="367.5" >al..</text>
</g>
<g >
<title>try_to_wake_up (30,303,030 samples, 0.28%)</title><rect x="318.6" y="389" width="3.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="321.58" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (242,424,240 samples, 2.21%)</title><rect x="1157.4" y="325" width="26.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1160.40" y="335.5" >g..</text>
</g>
<g >
<title>skb_gso_transport_seglen (10,101,010 samples, 0.09%)</title><rect x="757.6" y="117" width="1.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="760.55" y="127.5" ></text>
</g>
</g>
</svg>
